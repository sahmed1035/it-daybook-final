{"version":3,"sources":["components/layout/AddBtn.js","actions/logActions.js","actions/types.js","actions/techActions.js","components/techs/TechSelectOptions.js","components/logs/AddLogModal.js","components/logs/EditLogModal.js","components/techs/AddTechModal.js","components/techs/TechItem.js","components/techs/TechListModal.js","reducers/logReducer.js","reducers/techReducer.js","reducers/index.js","store.js","components/layout/SearchBar.js","components/logs/LogItem.js","components/layout/Preloader.js","components/logs/Logs.js","App.js","index.js"],"names":["AddBtn","className","data-position","data-tooltip","style","marginBottom","marginRight","href","background","setLoading","type","getTechs","dispatch","a","fetch","res","json","data","payload","response","statusText","connect","state","tech","techs","loading","useEffect","map","t","key","id","value","firstName","lastName","modalStyle","width","height","addLog","log","method","body","JSON","stringify","headers","useState","message","setMessage","attention","seAttention","setTech","name","onChange","e","target","htmlFor","disabled","checked","onClick","M","toast","html","newLog","date","Date","current","updateLog","updLog","addTech","setFirstName","setLastName","deleteTech","initialState","logs","error","combineReducers","action","filter","console","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","searchLogs","text","useRef","placeholder","ref","deleteLog","setCurrent","format","Preloader","getLogs","length","App","AutoInit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6069d27.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * using materialize classes.\r\n * an a-tag with the href to a modal.\r\n * floating button with the sub buttons for add a tech and stuff.\r\n * Add a log. Add a Tech. View all the Techs in our database.\r\n *\r\n */\r\n\r\nconst AddBtn = () => {\r\n  return (\r\n    <div\r\n      className=\"fixed-action-btn tooltipped \"\r\n      data-position=\"bottom\"\r\n      data-tooltip=\"Add a Log\"\r\n      style={{ marginBottom: \"50px\", marginRight: \"40px\" }}\r\n    >\r\n      <a\r\n        href=\"#add-log-modal\"\r\n        style={{ background: \"#ef562d\" }}\r\n        className=\"btn-floating btn-large scale-transition modal-trigger\"\r\n      >\r\n        <i className=\"large material-icons\">add</i>\r\n      </a>\r\n      <ul>\r\n        {/* list item for the tech list modal */}\r\n        <li>\r\n          <a\r\n            href=\"#tech-list-modal\"\r\n            className=\"btn-floating green modal-trigger tooltipped\"\r\n            data-position=\"bottom\"\r\n            data-tooltip=\" Edit Tech List\"\r\n          >\r\n            <i className=\"material-icons\">person</i>\r\n          </a>\r\n        </li>\r\n        {/* list item for the tech modal */}\r\n        <li>\r\n          <a\r\n            href=\"#add-tech-modal\"\r\n            className=\"btn-floating blue modal-trigger tooltipped\"\r\n            data-position=\"bottom\"\r\n            data-tooltip=\"Add a Tech\"\r\n          >\r\n            <i className=\"material-icons\">person_add</i>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddBtn;\r\n","import {\r\n  GET_LOGS,\r\n  UPDATE_LOG,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  DELETE_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  SEARCH_LOGS\r\n} from \"./types\";\r\n\r\n/**\r\n * redux-thunk allows to return the function directly\r\n * using redux-thunk to instead of just returning an object in the return, we can return an action.\r\n * need this for async call.\r\n * that function passed in a dispatch method.\r\n * we can make the request to our backend, then wait, get the response and then dispatch to the reducer.\r\n */\r\n\r\n//getLogs action easier way. Keeping for reference\r\n// export const getLogs = () => {\r\n//redux-thunk allows to return the function directly. takes in dispatch so that we can dispatch to the reducer\r\n//   return async dispatch => {\r\n//     setLoading();\r\n//setting loading to true\r\n\r\n// making fetch request\r\n//     const res = await fetch(\"/logs\");\r\n//     const data = await res.json();\r\n\r\n//     dispatch({\r\n//       type: GET_LOGS,\r\n//       payload: data\r\n//     });\r\n//   };\r\n// };\r\n\r\n// getLogs ACTION (Get logs from server)\r\n/**\r\n * logAction is going to make a request\r\n *  then get the data,\r\n *  then dispatch to our reducer\r\n * and change the state within the reducer.\r\n */\r\nexport const getLogs = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n    //making request through fetch API which returns a promise\r\n    // don't need to write localhost/:5000 because we added proxy.\r\n    const res = await fetch(\"/logs\");\r\n    // formating data as json. it doesn't return json data like axios.\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: GET_LOGS,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// ADD A NEW LOG. post method in fetch requires an object\r\nexport const addLog = log => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/logs\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(log),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: ADD_LOG,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// DELETE A LOG\r\nexport const deleteLog = id => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/logs/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    dispatch({\r\n      type: DELETE_LOG,\r\n      payload: id\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Update Log on the Server. takes in the whole updated log. need to send the body\r\nexport const updateLog = log => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(`/logs/${log.id}`, {\r\n      method: \"PUT\",\r\n      body: JSON.stringify(log),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: UPDATE_LOG,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * On json-server we can make a request to /logs?q Q parameter which is just query and whatever text we want.\r\n * instead of filtering and storing the data in the filtered state, we are just hitting an endpoint to json-server.\r\n */\r\n\r\n// Search Server Logs\r\nexport const searchLogs = text => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(`/logs?q=${text}`);\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: SEARCH_LOGS,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: LOGS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * in order to updateLog first set current.\r\n * also need to clear current. set the current back to null.\r\n */\r\n\r\n// Set Current Log\r\nexport const setCurrent = log => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: log\r\n  };\r\n};\r\n\r\n// Clear Current Log\r\nexport const clearCurrent = () => {\r\n  return {\r\n    type: CLEAR_CURRENT\r\n  };\r\n};\r\n\r\n// function to set loading to true.\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING\r\n  };\r\n};\r\n","export const GET_LOGS = \"GET_LOGS\";\r\nexport const ADD_LOG = \"ADD_LOG\";\r\nexport const DELETE_LOG = \"DELETE_LOG\";\r\n\r\nexport const SET_CURRENT = \"SET_CURRENT\";\r\nexport const CLEAR_CURRENT = \"CLEAR_CURRENT\";\r\nexport const UPDATE_LOG = \"UPDATE_LOG\";\r\nexport const CLEAR_LOGS = \"CLEAR_LOGS\";\r\n\r\nexport const SET_LOADING = \"SET_LOADING \";\r\nexport const LOGS_ERROR = \"LOGS_ERROR\";\r\nexport const SEARCH_LOGS = \"SEARCH_LOGS\";\r\n\r\nexport const GET_TECHS = \"GET_TECHS\";\r\nexport const ADD_TECH = \"ADD_TECH\";\r\nexport const DELETE_TECH = \"DELETE_TECH\";\r\nexport const TECHS_ERROR = \"TECHS_ERROR\";\r\n","import {\r\n  GET_TECHS,\r\n  ADD_TECH,\r\n  DELETE_TECH,\r\n  SET_LOADING,\r\n  TECHS_ERROR\r\n} from \"./types\";\r\n\r\n// Get techs from the server\r\nexport const getTechs = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/techs\");\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: GET_TECHS,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TECHS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Add technician to Server\r\nexport const addTech = tech => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    /**\r\n     * adding an other object with the method, body and headers\r\n     */\r\n    const res = await fetch(\"/techs\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(tech),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const data = await res.json();\r\n    dispatch({\r\n      type: ADD_TECH,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TECHS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Delete Tech in Server\r\n\r\nexport const deleteTech = id => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/techs/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    dispatch({\r\n      type: DELETE_TECH,\r\n      payload: id\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TECHS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Set loading to true\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING\r\n  };\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n//racfp . functional component with proptypes.\r\nimport { getTechs } from \"../../actions/techActions\";\r\n\r\n// from the tech state pulling out techs and loading\r\nconst TechSelectOptions = ({ getTechs, tech: { techs, loading } }) => {\r\n  /**\r\n   * empty bracket for running only when the component mounts\r\n   * eslint for dependencies warning.\r\n   */\r\n  useEffect(() => {\r\n    getTechs();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    !loading &&\r\n    techs !== null &&\r\n    techs.map(t => (\r\n      <option key={t.id} value={`${t.firstName} ${t.lastName}`}>\r\n        {t.firstName} {t.lastName}\r\n      </option>\r\n    ))\r\n  );\r\n};\r\n\r\nTechSelectOptions.propTypes = {\r\n  tech: PropTypes.object.isRequired,\r\n  getTechs: PropTypes.func.isRequired\r\n};\r\n\r\n// pulling the whole tech state\r\nconst mapStateToProps = state => ({\r\n  tech: state.tech\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getTechs }\r\n)(TechSelectOptions);\r\n","import React, { useState } from \"react\";\r\n\r\n// 1. bring in connect\r\nimport { connect } from \"react-redux\";\r\n// 2. need PropTypes actions are prop and anything we bring from state\r\nimport PropTypes from \"prop-types\";\r\nimport { addLog } from \"../../actions/logActions\";\r\nimport TechSelectOptions from \"../techs/TechSelectOptions\";\r\n\r\n//brining in materialize js for toast alert msg.\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\n\r\n/**\r\n * A form. so it has component level state.\r\n * useState hook and useEffect to call it.\r\n */\r\n\r\nconst AddLogModal = ({ addLog }) => {\r\n  // declearing initial states\r\n  const [message, setMessage] = useState(\"\");\r\n  const [attention, seAttention] = useState(false);\r\n  const [tech, setTech] = useState(\"\");\r\n\r\n  //onSubmit Method\r\n  const onSubmit = () => {\r\n    // error checking\r\n    if (message === \"\" || tech === \"\") {\r\n      M.toast({ html: \"Please enter a message and tech.\" });\r\n    } else {\r\n      // create a new log\r\n      const newLog = {\r\n        message,\r\n        attention,\r\n        tech,\r\n        date: new Date()\r\n      };\r\n      // calling addLog action and passing in the newLog\r\n      addLog(newLog);\r\n\r\n      // putting material alert\r\n      M.toast({ html: `Log added by ${tech}` });\r\n\r\n      // Clear fields\r\n      setMessage(\"\");\r\n      setTech(\"\");\r\n      seAttention(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"add-log-modal\" className=\"modal\" style={modalStyle}>\r\n      {/* modal content. heading. a row with input field with the value and onChange method calling setMessage to set whatever we type in.*/}\r\n      <div className=\"modal-content\">\r\n        <h4>Enter System Log</h4>\r\n        {/* fisrt row */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={e => setMessage(e.target.value)}\r\n            />\r\n            {/* materialize way of putting lable */}\r\n            <label htmlFor=\"message\" className=\"active\">\r\n              Log Message\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        {/* second row. value is tech from the state */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field purple\">\r\n            <select\r\n              name=\"tech\"\r\n              value={tech}\r\n              className=\"browser-default\"\r\n              onChange={e => setTech(e.target.value)}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select Technician\r\n              </option>\r\n              <TechSelectOptions />\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* third row for attention box. if attention is true then checked.  onChange change the value to NOT what it is right now*/}\r\n        <div className=\"row\">\r\n          <div className=\"input-field \">\r\n            <p>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"filled-in \"\r\n                  checked={attention}\r\n                  value={attention}\r\n                  onChange={e => seAttention(!attention)}\r\n                />\r\n                <span>Needs Attention</span>\r\n              </label>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* modal content ends */}\r\n      {/* modal footer starts. Enter button */}\r\n      <div className=\"modal-footer\">\r\n        <a\r\n          href=\"#!\"\r\n          onClick={onSubmit}\r\n          className=\"modal-close waves-effect wave-light green darken-4 btn\"\r\n        >\r\n          Enter\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//propTypes\r\nAddLogModal.propTypes = {\r\n  addLog: PropTypes.func.isRequired\r\n};\r\n\r\nconst modalStyle = {\r\n  width: \"75%\",\r\n  height: \"75%\"\r\n};\r\n// putting null for mapStateToProps as we are not bringing in any states. just actions\r\nexport default connect(\r\n  null,\r\n  { addLog }\r\n)(AddLogModal);\r\n","import React, { useState, useEffect } from \"react\";\r\n// conneting to redux\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { updateLog } from \"../../actions/logActions\";\r\n//brining in materialize js for toast alert msg.\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\nimport TechSelectOptions from \"../techs/TechSelectOptions\";\r\n\r\n/**\r\n * A form. so it has component level state.\r\n * useState hook and useEffect to call it.\r\n */\r\n\r\nconst EditLogModal = ({ current, updateLog }) => {\r\n  // Component Level States: declearing initial states\r\n  const [message, setMessage] = useState(\"\");\r\n  const [attention, seAttention] = useState(false);\r\n  const [tech, setTech] = useState(\"\");\r\n\r\n  // useEffect for lifeCycle methods. if data exists in current then setMessage to current.message\r\n  useEffect(() => {\r\n    if (current) {\r\n      setMessage(current.message);\r\n      seAttention(current.attention);\r\n      setTech(current.tech);\r\n    }\r\n  }, [current]); // passing current array as a dependency to useEffect\r\n\r\n  //onSubmit Method\r\n  const onSubmit = () => {\r\n    // error checking\r\n    if (message === \"\" || tech === \"\") {\r\n      M.toast({ html: \"Please enter a message and tech.\" });\r\n    } else {\r\n      //creating a new object for updated log\r\n      const updLog = {\r\n        id: current.id,\r\n        message,\r\n        attention,\r\n        tech,\r\n        date: new Date()\r\n      };\r\n\r\n      updateLog(updLog);\r\n      M.toast({ html: `Log number ${current.id} updated by ${tech}` });\r\n\r\n      // Clear fields\r\n      setMessage(\"\");\r\n      setTech(\"\");\r\n      seAttention(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"edit-log-modal\" className=\"modal\" style={modalStyle}>\r\n      {/* modal content. heading. a row with input field with the value and onChange method calling setMessage to set whatever we type in.*/}\r\n      <div className=\"modal-content\">\r\n        <h4>Edit System Log</h4>\r\n        {/* fisrt row */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"message\"\r\n              value={message}\r\n              onChange={e => setMessage(e.target.value)}\r\n            />\r\n            {/* materialize way of putting lable */}\r\n            {/* <label htmlFor=\"message\" className=\"active\">\r\n              Log Message\r\n            </label> */}\r\n          </div>\r\n        </div>\r\n\r\n        {/* second row. value is tech from the state */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field purple\">\r\n            <select\r\n              name=\"tech\"\r\n              value={tech}\r\n              className=\"browser-default\"\r\n              onChange={e => setTech(e.target.value)}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Select Technician\r\n              </option>\r\n              <TechSelectOptions />\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* third row for attention box. if attention is true then checked.  onChange change the value to NOT what it is right now*/}\r\n        <div className=\"row\">\r\n          <div className=\"input-field \">\r\n            <p>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"filled-in \"\r\n                  checked={attention}\r\n                  value={attention}\r\n                  onChange={e => seAttention(!attention)}\r\n                />\r\n                <span>Needs Attention</span>\r\n              </label>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* modal content ends */}\r\n      {/* modal footer starts. Enter button */}\r\n      <div className=\"modal-footer\">\r\n        <a\r\n          href=\"#!\"\r\n          onClick={onSubmit}\r\n          className=\"modal-close waves-effect wave-light green darken-4 btn\"\r\n        >\r\n          Enter\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst modalStyle = {\r\n  width: \"75%\",\r\n  height: \"75%\"\r\n};\r\n\r\n// PropTypes\r\nEditLogModal.propTypes = {\r\n  current: PropTypes.object,\r\n  updateLog: PropTypes.func.isRequired\r\n};\r\n\r\n// passing in the whole state and getting the current\r\nconst mapStateToProps = state => ({\r\n  current: state.log.current\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { updateLog }\r\n)(EditLogModal);\r\n","import React, { useState } from \"react\";\r\n//brining in materialize js for toast alert msg.\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addTech } from \"../../actions/techActions\";\r\n\r\n/**\r\n * A form. so it has component level state.\r\n * useState hook and useEffect to call it.\r\n *\r\n * bring in connect.\r\n * bring in propTypes\r\n * bring in addTech\r\n * put as a prop\r\n * also set techs state as a prop\r\n */\r\n\r\nconst AddTechModal = ({ addTech }) => {\r\n  // declearing initial states\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n\r\n  //onSubmit Method\r\n  const onSubmit = () => {\r\n    // error checking\r\n    if (firstName === \"\" || lastName === \"\") {\r\n      M.toast({ html: \"Please enter first and last name.\" });\r\n    } else {\r\n      addTech({\r\n        firstName,\r\n        lastName\r\n      });\r\n\r\n      M.toast({\r\n        html: `New tech ${firstName} ${lastName} is added in the tech list.`\r\n      });\r\n\r\n      // Clear fields\r\n      setFirstName(\"\");\r\n      setLastName(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"add-tech-modal\" className=\"modal\">\r\n      {/* modal content. heading. a row with input field with the value and onChange method calling setMessage to set whatever we type in.*/}\r\n      <div className=\"modal-content\">\r\n        <h4>New Technician</h4>\r\n        {/* fisrt row */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              value={firstName}\r\n              onChange={e => setFirstName(e.target.value)}\r\n            />\r\n            {/* materialize way of putting lable */}\r\n            <label htmlFor=\"firstName\" className=\"active\">\r\n              First Name\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        {/* second row. value is tech from the state */}\r\n        <div className=\"row\">\r\n          <div className=\"input-field\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              value={lastName}\r\n              onChange={e => setLastName(e.target.value)}\r\n            />\r\n            {/* materialize way of putting lable */}\r\n            <label htmlFor=\"lastName\" className=\"active\">\r\n              Last Name\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* modal content ends */}\r\n      {/* modal footer starts. Enter button */}\r\n      <div className=\"modal-footer\">\r\n        <a\r\n          href=\"#!\"\r\n          onClick={onSubmit}\r\n          className=\"modal-close waves-effect wave-light green darken-4 btn\"\r\n        >\r\n          Enter\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n//propTypes\r\nAddTechModal.propTypes = {\r\n  addTech: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { addTech }\r\n)(AddTechModal);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n//racfp for functional component with prop\r\nimport { deleteTech } from \"../../actions/techActions\";\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\n\r\nconst TechItem = ({ tech: { firstName, lastName, id }, deleteTech }) => {\r\n  const onDelete = () => {\r\n    deleteTech(id);\r\n    M.toast({\r\n      html: `${firstName} ${lastName} was deleted successfully.`\r\n    });\r\n  };\r\n\r\n  return (\r\n    <li className=\"collection-item\">\r\n      <div>\r\n        {firstName} {lastName}\r\n        <a href=\"#!\" onClick={onDelete} className=\"secondary-content\">\r\n          <i className=\"material-icons grey-text\">delete</i>\r\n        </a>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nTechItem.propTypes = {\r\n  //ptor for PropType.object.isRequired\r\n  tech: PropTypes.object.isRequired,\r\n  deleteTech: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteTech }\r\n)(TechItem);\r\n","// fetch it from the backend from the component for now then we will move it to redux.\r\nimport React, { useEffect } from \"react\";\r\nimport TechItem from \"./TechItem\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getTechs } from \"../../actions/techActions\";\r\n\r\n/**\r\n * make the request in the useEffect hook.\r\n * setLogs to change the state. an empty array by default\r\n * loading. since we are making a request to get the data\r\n */\r\nconst TechListModal = ({ getTechs, tech: { techs, loading } }) => {\r\n  // calling getLogs function in the useEffect\r\n  useEffect(() => {\r\n    getTechs();\r\n    // eslint-disable-next-line\r\n  }, []); // passing an empty array becuase we want it to run only once.\r\n\r\n  // don't need to write localhost/:5000 because we added proxy.\r\n\r\n  return (\r\n    <div id=\"tech-list-modal\" className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <h4>Technicians List</h4>\r\n        <ul className=\"collection\">\r\n          {/* before looping through each item make sure loading is done and techs is not null */}\r\n          {!loading &&\r\n            techs !== null &&\r\n            techs.map(tech => <TechItem tech={tech} key={tech.id} />)}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    /**\r\n     * we should have access to logs here.\r\n     * using collection class.\r\n     * Looping through logs and outputting a list item\r\n     * putting expressing with a condition.\r\n     * if not loading and logs.length is zero then show a paragraph saying No logs to show.\r\n     * else logs.map and for each log display a log item\r\n     */\r\n  );\r\n};\r\n\r\n// PropTypes\r\nTechListModal.propTypes = {\r\n  tech: PropTypes.object.isRequired,\r\n  getTechs: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  tech: state.tech\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getTechs }\r\n)(TechListModal);\r\n","import {\r\n  GET_LOGS,\r\n  UPDATE_LOG,\r\n  DELETE_LOG,\r\n  SET_LOADING,\r\n  LOGS_ERROR,\r\n  ADD_LOG,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  SEARCH_LOGS\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  logs: null,\r\n  current: null,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_LOGS:\r\n      return {\r\n        ...state,\r\n        logs: action.payload,\r\n        loading: false\r\n      };\r\n\r\n    case ADD_LOG:\r\n      return {\r\n        ...state,\r\n        logs: [...state.logs, action.payload],\r\n        //spread operator since state is immutable. action.payload has the new log\r\n        loading: false\r\n      };\r\n\r\n    case DELETE_LOG:\r\n      return {\r\n        ...state,\r\n        logs: state.logs.filter(log => log.id !== action.payload),\r\n        loading: false\r\n      };\r\n\r\n    case UPDATE_LOG:\r\n      return {\r\n        ...state,\r\n        logs: state.logs.map(log =>\r\n          log.id === action.payload.id ? action.payload : log\r\n        ),\r\n        loading: false\r\n      };\r\n\r\n    case SEARCH_LOGS:\r\n      return {\r\n        ...state,\r\n        logs: action.payload // setting the logs state to the action.payload which has the server response in data.\r\n      };\r\n\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload\r\n      };\r\n\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null\r\n      };\r\n\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n\r\n    case LOGS_ERROR:\r\n      console.error(action.payload);\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n\r\n    // default\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * export a default function which takes in state and action.\r\n * evaluate action.type with a switch\r\n * a default that will return the state as is.\r\n * create inital state for log.\r\n * set export default to state = initialState\r\n * bring this to root reducer. index.js in the reducer folder.\r\n */\r\n","import {\r\n  GET_TECHS,\r\n  SET_LOADING,\r\n  ADD_TECH,\r\n  DELETE_TECH,\r\n  TECHS_ERROR\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  techs: null, //null by default. after getting response, an array\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_TECHS:\r\n      return {\r\n        ...state,\r\n        techs: action.payload,\r\n        loading: false\r\n      };\r\n    /**\r\n     * to add a tech take techs \"techs:\"\r\n     *  and set an arry where []\r\n     * we copy the current techs that are already there by spreading \"...state.techs\" and\r\n     * add the new tech \"action.payload\"\r\n     */\r\n    case ADD_TECH:\r\n      return {\r\n        ...state,\r\n        techs: [...state.techs, action.payload],\r\n        loading: false\r\n      };\r\n\r\n    /**\r\n     * copy the current state. ...state\r\n     * set techs state \"techs:\"\r\n     *  \"state.techs\" will give us the current array.\r\n     * filter through. \".filter()\"\r\n     * for each tech filter out where the tech.id is not equal to action.payload\r\n     * tech => tech.id !== action.payload\r\n     */\r\n\r\n    case DELETE_TECH:\r\n      return {\r\n        ...state,\r\n        techs: state.techs.filter(tech => tech.id !== action.payload),\r\n        loading: false\r\n      };\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n\r\n    case TECHS_ERROR:\r\n      console.error(action.payload);\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport logReducer from \"./logReducer\";\r\nimport techReducer from \"./techReducer\";\r\n\r\nexport default combineReducers({\r\n  log: logReducer, // should be same as in the mapStateToProps\r\n  tech: techReducer\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n// we will bring other reducers into the rootReducer\r\nimport rootReducer from \"./reducers\";\r\n\r\n/**\r\n * initial app level state with and empty object.\r\n * create a middleware varialbe. any middleware we use put here in and array.\r\n * create a store with createStore we brought in.\r\n * store takes in rootReducer to know which reducer we are working with. initial state and middleware\r\n */\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)) // doing this way will also add dev functionality\r\n);\r\n\r\nexport default store;\r\n","import React, { useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { searchLogs } from \"../../actions/logActions\";\r\n\r\n// passing serchLogs action as a prop.\r\nconst SearchBar = ({ searchLogs }) => {\r\n  // useRef hook to get the value from the search form.\r\n  const text = useRef(\"\"); // default value is empty\r\n\r\n  // onChange method. we dont have a submit button. filter as we type. as we type make a request to our bckend\r\n  const onChange = e => {\r\n    searchLogs(text.current.value);\r\n  };\r\n\r\n  return (\r\n    <nav style={{ marginBottom: \"30px\", background: \"#5587a2\" }}>\r\n      <div className=\"nav-wrapper\">\r\n        <form>\r\n          <div className=\"input-field\">\r\n            <input\r\n              id=\"search\"\r\n              type=\"search\"\r\n              placeholder=\"Search Logs...\"\r\n              ref={text}\r\n              onChange={onChange}\r\n            />\r\n            <label className=\"label-icon\" htmlFor=\"search\">\r\n              <i className=\"material-icons\">close</i>\r\n            </label>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// PropTypes\r\nSearchBar.propTypes = {\r\n  serchLogs: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { searchLogs }\r\n)(SearchBar);\r\n","//racfp p will bring the propstypes.\r\nimport React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { deleteLog, setCurrent } from \"../../actions/logActions\";\r\n\r\nimport M from \"materialize-css/dist/js/materialize.min.js\";\r\n\r\n// will pass in log as a prop. condition if attention needed red-text\r\nconst LogItem = ({ log, deleteLog, setCurrent }) => {\r\n  //onDelete function\r\n  const onDelete = () => {\r\n    deleteLog(log.id);\r\n    M.toast({ html: `Log number ${log.id} is deleted.` });\r\n  };\r\n\r\n  return (\r\n    <li className=\"collection-item\">\r\n      <div>\r\n        {/* log.message  #edit-log-modal*/}\r\n        <a\r\n          href=\"#edit-log-modal\"\r\n          className={`modal-trigger ${\r\n            log.attention ? \"red-text\" : \"blue-text\"\r\n          }`}\r\n          onClick={() => setCurrent(log)}\r\n        >\r\n          {log.message}\r\n        </a>\r\n        <br />\r\n        {/* id date and tech */}\r\n        <span className=\"grey-text\">\r\n          <span className=\"black-text\">ID # {log.id}</span> last updated by{\" \"}\r\n          <span className=\"black-text\">{log.tech}</span> on{\" \"}\r\n          <Moment format=\"MMMM Do YYYY, h:mm:ss a\">{log.date}</Moment>\r\n        </span>\r\n        {/* delete button */}\r\n        <a href=\"#!\" onClick={onDelete} className=\"secondary-content\">\r\n          <i className=\"material-icons grey-text\">delete</i>\r\n        </a>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nLogItem.propTypes = {\r\n  //ptor\r\n  log: PropTypes.object.isRequired,\r\n  deleteLog: PropTypes.func.isRequired,\r\n  setCurrent: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { deleteLog, setCurrent }\r\n)(LogItem);\r\n","import React from \"react\";\r\n\r\nconst Preloader = () => {\r\n  return (\r\n    <div className=\"progress blue lighten-4\">\r\n      <div className=\"indeterminate blue\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getLogs } from \"../../actions/logActions\";\r\nimport LogItem from \"./LogItem\";\r\nimport Preloader from \"../layout/Preloader\";\r\nimport PropTypes from \"prop-types\";\r\n/**\r\n * make the request in the useEffect hook.\r\n * setLogs to change the state. an empty array by default\r\n * loading. since we are making a request to get the data\r\n * destructuring props log from state.log that we brought in here through mapStateToProp\r\n */\r\nconst Logs = ({ log: { logs, loading }, getLogs }) => {\r\n  // calling getLogs function in the useEffect\r\n  useEffect(() => {\r\n    getLogs();\r\n    // eslint-disable-next-line\r\n  }, []); // passing an empty array becuase we want it to run only once.\r\n\r\n  if (loading || logs === null) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    /**\r\n     * we should have access to logs here.\r\n     * using collection class.\r\n     * Looping through logs and outputting a list item\r\n     * putting expressing with a condition.\r\n     * if not loading and logs.length is zero then show a paragraph saying No logs to show.\r\n     * else logs.map and for each log display a log item\r\n     */\r\n\r\n    <ul className=\"collection with-header z-depth-2\">\r\n      <li className=\"collection-header \">\r\n        <h2 className=\"center \">System Logs</h2>\r\n      </li>\r\n\r\n      {!loading && logs.length === 0 ? (\r\n        <p className=\"center \">No logs to show...</p>\r\n      ) : (\r\n        logs.map(log => <LogItem log={log} key={log.id} />) // will display LogItem Component here.\r\n        //passing in current log as a prop.\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nLogs.propTypes = {\r\n  log: PropTypes.object.isRequired,\r\n  getLogs: PropTypes.func.isRequired\r\n};\r\n\r\n/**\r\n * to get anything from your app level state and bring to the component, you bring it as a prop.\r\n * mapStateToProps we are mapping anything in our app level state to a local component prop.\r\n * call this prop in the connect.\r\n */\r\nconst mapStateToProps = state => ({\r\n  //set an object and describe what we want to get from the state.\r\n  log: state.log // rootReducer variable name should be the same\r\n});\r\n// connects takes in two props, mapStatetoProps and any function we want to run\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getLogs }\r\n)(Logs);\r\n","import React, { Fragment, useEffect } from \"react\";\n\n// bringing materialize-css\nimport \"materialize-css/dist/css/materialize.min.css\";\n// bringing in materialize javascript for models and stuff\nimport M from \"materialize-css/dist/js/materialize.min.js\";\n\nimport AddBtn from \"./components/layout/AddBtn\";\nimport AddLogModal from \"./components/logs/AddLogModal\";\nimport EditLogModal from \"./components/logs/EditLogModal\";\nimport AddTechModal from \"./components/techs/AddTechModal\";\nimport TechListModal from \"./components/techs/TechListModal\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"./App.css\";\nimport SearchBar from \"./components/layout/SearchBar\";\nimport Logs from \"./components/logs/Logs\";\n\nconst App = () => {\n  // initializing Materialize JavaScript. Should be able to use Models\n  useEffect(() => {\n    M.AutoInit();\n  });\n\n  return (\n    // <div className=\"App\">\n    <Provider store={store}>\n      <Fragment>\n        <SearchBar />\n        <div className=\"container\">\n          <AddBtn />\n          <AddLogModal />\n          <EditLogModal />\n          <AddTechModal />\n          <TechListModal />\n          <Logs />\n        </div>\n      </Fragment>\n    </Provider>\n    // </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}